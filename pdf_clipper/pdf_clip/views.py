from django.shortcuts import render
from django.http import FileResponse, HttpResponse, StreamingHttpResponse
from pdf2image import convert_from_path
from PyPDF2 import PdfReader, PdfWriter
from PIL import Image
from reportlab.pdfgen.canvas import Canvas
from django.views.decorators.http import condition

from django.utils.timezone import now

from django.forms.models import model_to_dict
from django.core.serializers import serialize
from django.core import serializers

from django.template import Context, Template

from django.conf import settings
from django.core.files.storage import FileSystemStorage

import simplejson
import time
import math

from rest_framework import viewsets, generics
from .serializers import ClipSerializer, FileSerializer
from .models import Clip, File

class ClipViewSet(viewsets.ModelViewSet):
    queryset = Clip.objects.all().order_by('id')
    serializer_class = ClipSerializer

class FileViewSet(viewsets.ModelViewSet):
    queryset = File.objects.all().order_by('id')
    serializer_class = FileSerializer

class ClipViewSet2(generics.ListAPIView):
    # queryset = Clip.objects.all().order_by('id')
    serializer_class = ClipSerializer
    def get_queryset(self):
        queryset = Clip.objects.filter(fileId=self.request.query_params.get('fileId'))
        return queryset

class FileViewSet2(generics.ListAPIView):
    # queryset = File.objects.all().order_by('id')
    serializer_class = FileSerializer
    def get_queryset(self):
        queryset = File.objects.filter(id=self.request.query_params.get('fileId'))
        return queryset

# Create your views here.

def upload(request):
    if request.method == 'POST':
        if 'myfile' in request.FILES:
            myfile = request.FILES['myfile']
            fs = FileSystemStorage()
            pdffilename = fs.save(myfile.name, myfile)
            ext = str(pdffilename).split(".")[-1]
            if ext == "pdf":
                pdf = PdfReader("pdf_clip/static/upload/" + pdffilename,"rb")
                pdfFile = File(fileName=pdffilename, pages=len(pdf.pages))
                pdfFile.save()
                request.session["pdfFiles"] = pdfFile.id

                return render(request, "pdf_clip/clip.html", {
                    "pdfFile": pdffilename,
                    "pages": len(pdf.pages),
                })
            else:
                return render(request, "pdf_clip/upload.html", {
                    "errorMsg": "That is not a pdf file.",
                })
        elif 'clips' in request.POST:
            positionArray = simplejson.loads(request.POST['posArray'])
            currentFile = File.objects.get(id=request.session['pdfFiles'])
            currentFile.positionArray = simplejson.dumps(positionArray)
            currentFile.save()
            if request.POST['delArray']:
                delArray = simplejson.loads(request.POST['delArray'])
                delClips = Clip.objects.filter(clipNumber__in=delArray, fileId = currentFile)
                delClips.delete()
            return render(request, "pdf_clip/clip.html", {
                "pdfFile": currentFile.fileName,
                "clips": request.POST['clips'],
                "posArray": simplejson.dumps(positionArray),
                "pages": currentFile.pages,
            })
    else:
        fileSystem = FileSystemStorage()
        allFiles = fileSystem.listdir(fileSystem.location)[1]
        if (len(allFiles) > 0):
            for file in allFiles:
                if (file != 'FF01TheWarlockofFiretopMountain.pdf'):
                    # print(file)
                    fileSystem.delete(file)
                    thisFile = File.objects.get(fileName=file)
                    # print(thisFile)
                    thisFile.delete()

        return render(request, 'pdf_clip/upload.html')

def clip(request):
    currentFile = File.objects.get(id=17)
    currentClips = Clip.objects.filter(fileId = currentFile)
    pdf = PdfReader("pdf_clip/static/upload/" + currentFile.fileName,"rb")
    maxPageHeight = 0
    maxPageWidth = 0
    for page in pdf.pages:
        if page.mediabox[3] - page.mediabox[1] > maxPageHeight:
            maxPageHeight = page.mediabox[3] - page.mediabox[1]
    
    for clip in currentClips:
        newScale = math.floor(maxPageHeight / (pdf.pages[clip.pageNumber].mediabox[3] - pdf.pages[clip.pageNumber].mediabox[1]))
        if clip.minX != None and clip.maxX != None:
            if (clip.maxX - clip.minX) * newScale > maxPageWidth:
                maxPageWidth = (clip.maxX - clip.minX) * newScale
        elif (pdf.pages[clip.pageNumber].mediabox[2] - pdf.pages[clip.pageNumber].mediabox[0]) * newScale > maxPageWidth:
            maxPageWidth = (pdf.pages[clip.pageNumber].mediabox[2] - pdf.pages[clip.pageNumber].mediabox[0]) * newScale

    print(maxPageHeight)
    print(maxPageWidth)



    # pages = convert_from_path("pdf_clip/static/upload/FF01TheWarlockofFiretopMountain.pdf", 100)

    # minPageWidth = None
    # maxPageWidth = 0
    # maxPageHeight = 0
    # maxIndex = len(pages)
    # for index, page in enumerate(pages):
    #     p = pdf.pages[index]
    #     if minPageWidth is None or p.mediabox.width < minPageWidth:
    #         minPageWidth = p.mediabox.width
    #     if p.mediabox.width > maxPageWidth:
    #         maxPageWidth = p.mediabox.width
    #     if p.mediabox.height > maxPageHeight:
    #         maxPageHeight = p.mediabox.height
    #     print(index/maxIndex)

    # print(minPageWidth)
    # print(maxPageWidth)
    # print(maxPageHeight)

    # return render(request, "pdf_clip/clip.html", {
        
    # })

    return HttpResponse('page clips')


def review(request):
    # clips = request.POST['clips'].split('\t')
    # print(request.session['pdfFiles'])
    # currentFile = File.objects.get(id=request.session['pdfFiles'])
    # for index, clip in enumerate(clips):
    #     clipData = clip.split(',')
    #     currentClip = Clip(fileId=currentFile, pageNumber=clipData[0], clipNumber=index, 
    #         minY=clipData[1], maxY=clipData[2],note='')
    #     currentClip.save()
    
    # print(request.POST['clips'])
    if request.method == 'POST':
        currentFile = File.objects.get(id=request.session['pdfFiles'])
        if 'clips' in request.POST:
            formerClips = Clip.objects.filter(fileId=currentFile)
            formerClips.delete()
            requestClips = simplejson.loads(request.POST['clips'])
            for currentClip in requestClips:
                if 'note' in requestClips[currentClip]:
                    currentNote = requestClips[currentClip]['note']
                else:
                    currentNote = ''
                clip = Clip(fileId=currentFile,
                    clipNumber = currentClip,
                    pageNumber = requestClips[currentClip]['pageNumber'],
                    minY = requestClips[currentClip]['minY'],
                    maxY = requestClips[currentClip]['maxY'],
                    minX = requestClips[currentClip]['minX'],
                    maxX = requestClips[currentClip]['maxX'],
                    note = currentNote
                    )
                clip.save()

        # clipData = Clip.objects.filter(fileId = currentFile)
        # print(clipData)

        # clipData = {}
        # for clip in currentClips:
        #     clipData[clip.clipNumber] = {}
        #     clipData[clip.clipNumber]['page'] = clip.pageNumber
        #     clipData[clip.clipNumber]['min'] = clip.minY
        #     clipData[clip.clipNumber]['max'] = clip.maxY
        #     clipData[clip.clipNumber]['note'] = clip.note

        # print(clipData)

        # clips = {
        #     0: {'page': 23, 'min': 199, 'max': 374},   #142
        #     1: {'page': 24, 'min': 229, 'max': 454},   #183
        #     2: {'page': 43, 'min': 0, 'max': 600,},    #488
        #     3: {'page': 48, 'min': 61, 'max': 132},    # 57
        #     4: {'page': 48, 'min': 393, 'max': 517},   #100
        #     5: {'page': 2, 'min': 96, 'max': 390},     #239
        # }

        # print(clips)
        # notes = {
        #     3: 'note 3 goes here',
        #     5: 'note 5 goes here',
        #     6: 'note at end of clips goes here',
        # }

        # clipsJson = simplejson.dumps(clipData)
        # fileJson = simplejson.dumps(currentFile)
        # print(clipsJson)
        # notesJson = simplejson.dumps(notes)
        # print(clipData)
        posArray = []
        if currentFile.positionArray == None:
            if 'clips' in request.POST:
                for clip in requestClips:
                    posArray.append(int(clip))
        else:
            posArray = simplejson.loads(currentFile.positionArray)
            if 'clips' in request.POST:
                for clip in requestClips:
                    if int(clip) not in posArray:
                        posArray.append(int(clip))
            currentFile.positionArray = simplejson.dumps(posArray)
            currentFile.save()

        # print(posArray)
        positionArray = simplejson.dumps(posArray)
        # print(positionArray)
        # fileData = serializers.serialize("json", File.objects.get(id=request.session['pdfFiles']))
        # clipData = serializers.serialize("json", Clip.objects.filter(fileId = currentFile))
        clipData = Clip.objects.filter(fileId = currentFile).values()
        clipsDict = {}
        for clip in clipData:
            # print(clip)
            # print(clip['clipNumber'])
            clipsDict[clip['clipNumber']] = {}
            clipsDict[clip['clipNumber']]['pageNumber'] = clip['pageNumber']
            clipsDict[clip['clipNumber']]['minY'] = clip['minY']   
            clipsDict[clip['clipNumber']]['maxY'] = clip['maxY'] 
            clipsDict[clip['clipNumber']]['minX'] = clip['minX']   
            clipsDict[clip['clipNumber']]['maxX'] = clip['maxX'] 
            clipsDict[clip['clipNumber']]['note'] = clip['note'].replace('\'', '&apos;')
        clipsJson = simplejson.dumps(clipsDict)
        print(clipsJson)

        # print(clipsDict)

        return render(request, "pdf_clip/review.html", {
            "clipsJson": clipsJson,
            # "clipsJson": clipsJson,
            "currentFile": currentFile.fileName,
            "posArray": positionArray,
            # "fileJson": fileJson,
        })

def create(request):
    return render(request, "pdf_clip/build.html", {
        "fileId": request.session['pdfFiles'],
    })

def build(request):
    currentFile = File.objects.get(id=request.session['pdfFiles'])
    # add new file data request, put "false" in if no maxY - minY = 600 with a note
    # print(simplejson.loads(request.POST['clips']))
    # print(request.POST['delArray'])
    # print(simplejson.loads(request.POST['posArray']))
    positionArray = simplejson.loads(request.POST['posArray'])
    # print(positionArray)
    deleteArray = []
    if (request.POST['delArray']):
        deleteArray = simplejson.loads(request.POST['delArray'])

    requestClips = simplejson.loads(request.POST['clips'])
    for clip in requestClips:
        currentClip = Clip.objects.get(fileId = currentFile, clipNumber = clip)
        if (requestClips[clip]['note'] != currentClip.note):
            currentClip.note = requestClips[clip]['note']
            currentClip.save()
    delClips = Clip.objects.filter(clipNumber__in=deleteArray, fileId = currentFile)
    delClips.delete()
        # if (clip in deleteArray):
        #     currentClip.delete()
        # elif (clip['note'] != currentClip['note']):
        #     currentClip['note'] = clip['note']
        #     currentClip.save()
    currentFile.positionArray = simplejson.dumps(positionArray)

    currentClips = Clip.objects.filter(fileId = currentFile)
    pdf = PdfReader("pdf_clip/static/upload/" + currentFile.fileName,"rb")
    maxPageHeight = 0
    maxPageWidth = 0
    for page in pdf.pages:
        if page.mediabox[3] - page.mediabox[1] > maxPageHeight:
            maxPageHeight = page.mediabox[3] - page.mediabox[1]
    
    for clip in currentClips:
        newScale = math.floor(maxPageHeight / (pdf.pages[clip.pageNumber].mediabox[3] - pdf.pages[clip.pageNumber].mediabox[1]))
        print(newScale)
        if clip.minX != None and clip.maxX != None:
            print(clip.maxX - clip.minX)
            if (clip.maxX - clip.minX) * newScale > maxPageWidth:
                maxPageWidth = (clip.maxX - clip.minX) * newScale
        elif (pdf.pages[clip.pageNumber].mediabox[2] - pdf.pages[clip.pageNumber].mediabox[0]) * newScale > maxPageWidth:
            maxPageWidth = (pdf.pages[clip.pageNumber].mediabox[2] - pdf.pages[clip.pageNumber].mediabox[0]) * newScale

    currentFile.maxPageHeight = maxPageHeight
    currentFile.maxPageWidth = maxPageWidth

    currentFile.save()

    # return HttpResponse('this is the build page')
    return render(request, "pdf_clip/build.html", {
        "fileId": request.session['pdfFiles'],
    })

def test(request):
    # bookDict = {1:[71,278],2:[16,269],3:[272,127],4:[46,332],5:[97,292],6:[89],7:[214],8:[189,273],9:[34,322],10:[77],11:[366,250],12:['RETURN 161',256,364],13:[282],14:['RETURN 161',117],15:[367],16:[50,269],17:[380,144,327],18:[261,348],19:[317],20:[376,291],21:[339,293],22:[4],23:[326,229],24:[360,135],25:[90,340],26:[371],27:[319],28:[351],29:[375],30:[67,267],31:[90],32:[124],33:[320,147],34:[96],35:[136,361],36:[263,353],37:[366,11,277],38:[66],39:[396],40:[355,265,181],41:[310],42:[257,113],43:[354,52],44:[399],45:[90],46:[4,206],47:[158,298],48:[391,60],49:[122],50:[269],51:[287],52:[391,362,354,234,291],53:[155,300],54:[308,179],55:[7,166],56:[399],57:[16,2,119],58:[15,367],59:[150],60:[48],61:[29,375],62:[6,89],63:[281,10],64:['DEATH'],65:[293,372],66:[104,99],67:[267,177],68:[303],69:[244],70:[267],71:[301,248],72:[319],73:[218],74:[279,118],75:[93],76:[244],77:[345,18],78:[159,237],79:[137,267],80:[129,123,195,140],81:[205],82:[208,147,33],83:[360,154],84:[204,280,377],85:[106,373,318,59],86:[259,350],87:[262],88:[216,384],89:[286],90:[253],91:[131,20],92:[71],93:[8],94:[260,329],95:[205],96:[374],97:[334,247,292],98:[358],99:[383],100:[346,91],101:[327],102:[303,19,68],103:[252,359],104:[49],105:[39,382,368,194,215],106:[152,126],107:[148,197],108:[185],109:[120,212],110:[319],111:[249],112:[142,105],113:[285,78],114:[359],115:[95,313,330],116:[378,42],117:[354,308],118:['DEATH'],119:[269],120:[197],121:[103,359],122:[268,282,13],123:[184,164,140],124:[138,76],125:[73],126:[152,26],127:[272,188],128:[210,58],129:[104],130:[280],131:[291],132:[319],133:[52],134:[202,325,87],135:[360],136:[229],137:[354],138:[163,351],139:['TURNTO'],140:[395],141:[66,111],142:[396],143:[44,399],144:[101,217],145:[363],146:[366,11],147:[208],148:[230],149:[181,265,355],150:[222,297,133],151:[218,86,158],152:[371],153:[399],154:[41],155:[300],156:[343,92],157:[4,329],158:[218],159:[365,237],160:[365],161:['RETURN'],162:[23,69],163:[28,351],164:[129,236],165:[141,66,249],166:[218,158],167:[187,359],168:[372,65,293],169:[400],170:[319],171:[337,187],172:[249,141,165],173:[24,135,360],174:[198],175:[177,267],176:[270,375],177:[52,391,175],178:[162],179:[54,258],180:[70,329,22],181:[355,265],182:['TURNTO'],183:[266,237],184:[322,34],185:[162],186:[198],187:[171,308],188:[342,209],189:[90,25],190:[167,359],191:[308,392,46],192:[169],193:[93,338],194:[142,105],195:[140,164,9],196:[280],197:[48,295],198:['TURNTO'],199:[283],200:[387],201:[293],202:[87],203:[38,66],204:[130,280,377],205:[254,380],206:[284,341],207:[83,154],208:[397,363],209:[158,47],210:[225,357],211:[173,360],212:[369,120],213:[36,314],214:[271,104,99],215:[142,105],216:[384],217:[118],218:[3,386,209,316],219:[182],220:[171],221:[72,132,27,110,170],222:[85],223:[53,300],224:[118],225:[77,63],226:[267],227:[131,291,100,20],228:[85],229:[69],230:[390,64],231:[182],232:[375],233:[198],234:['RETURN 161',43],235:[176,5],236:[395],237:[285],238:[70,180,329],239:[88,149],240:[145],241:[90],242:[379,139],243:[128],244:[143,399],245:[198],246:[329,180,70],247:[292],248:[301],249:[66,304],250:[366],251:[344,399],252:[312,226],253:[328,125,73],254:[352,333,279,380],255:[193,93],256:[398,297,114],257:[168,293],258:[54],259:[7],260:[359,329],261:[345],262:[199,251],263:[314],264:[80,129],265:[88],266:[237],267:[312,246,79,349],268:[13,282],269:[225],270:[61,394,375],271:[336,214],272:[7],273:[189],274:[324,356,98],275:[230],276:[182],277:[146,366,11],278:[156,92],279:[380,17,333],280:[311],281:[10],282:[115],283:[251],284:[46,392],285:[213,314],286:[294,275,148,107],287:[32,309],288:[182],289:[396],290:[198],291:[315,52,227],292:[239,40],293:[113],294:[275,148,107],295:['RETURN 161',48],296:[42],297:[150,256],298:[86,7],299:[260,359],300:[102,303],301:[82,208],302:[198],303:[128,243],304:[66,203],305:[162,108],306:['RETURN 161',291],307:[134,87],308:[187,54,160,354],309:[124],310:[211],311:[305,178,108],312:[308],313:[221],314:[223,300],315:[306,291],316:[151,218],317:[303],318:[85,228],319:[221,81],320:[363],321:[169],322:[96],323:[8,255],324:[358],325:[87],326:[35,229],327:[380],328:[73,125],329:[157,392,299,238],330:[81],331:[287],332:[329,4],333:[327,380,224],334:[292],335:[182],336:[66,172,249],337:[267],338:[75,93],339:[201],340:[388,31,241,45],341:[46,392,220,191],342:[7],343:[92],344:[56,153],345:[381,311],346:[131],347:[182],348:[331,51],349:[267,30],350:[7],351:[76],352:[74,279],353:[314],354:[308,52,14,234],355:[181,265],356:[358],357:[269,57],358:[142,105,389],359:[190,94,121,385],360:[89],361:[136],362:[177],363:[370,42],364:[256,373],365:[183,237],366:[89,62],367:[235,323],368:[142,105],369:[109],370:[116,42],371:[274],372:[21],373:[85],374:[207],375:[5],376:[291],377:[196],378:[296,42],379:[139],380:[37],381:[84,280],382:[396],383:[80,264,129],384:[262,307],385:[114,297,398],386:[55,166],387:['DEATH'],388:[90],389:[289,112],390:[120,393],391:[52,362,48],392:[206,329],393:[212,369],394:[232],395:[322,34],396:[242],397:[240,363],398:[364,12],399:[218],400:['END'],}
    # bookDict = {1: [261,230,20],2: [142,343],3: [327,59,236,258],4: [190,303],5: [40,361],6: [367],7: [268,116],8: [218],9: [31],10: [249],11: [36,262,128,152,16],12: [274,335,78],13: [302,215],14: [79,100],15: [245],16: [99,180],17: [93],18: [84,31],19: [363,254],20: [288,96],21: [6],22: [188],23: [169],24: [372,219],25: [206,133,239],26: [87,345,101,304],27: [206],28: [243,2],29: [271,131],30: [241],31: [169],32: [251],33: [213],34: [89,237],35: [364,246],36: [234],37: [229],38: [132,306],39: [208,248],40: [243,2],41: [257],42: [138,91,223,64,304],43: [14],44: [353,277],45: [166,313,253,97],46: [195,74],47: [8,173,259,209],48: [232,199],49: [255],50: [164],51: [301,159,280],52: [385,227],53: [194],54: [287,160,27,104],55: [249,10],56: [120,163,334,95],57: [150,233],58: [298,267,92,156],59: [140],60: [33,295,213],61: ['DEATH'],62: [140],63: [263,135],64: [286,3,366],65: ['DEATH'],66: [270],67: [143,226],68: [207,22,354],69: [193],70: [307,264,325],71: [218],72: ['DEATH'],73: [112,282],74: [377],75: [40],76: [191],77: [187,46,349,355],78: [324,124,277],79: [218],80: [199,232],81: [251],82: ['DEATH'],83: [245],84: [234],85: [395],86: [251],87: [64],88: [292,170,64,304],89: [237],90: [176,21,329],91: [140],92: [156],93: [169],94: [118],95: [367],96: [251],97: [13,281],98: [303,4,190,237],99: [52,38],100: [79,276],101: [62,64],102: [183,396,270],103: ['DEATH'],104: [266,310,54,25],105: [95],106: [218],107: [184],108: [73],109: [30],110: [251,288],111: [347,153],112: [212,367],113: [388,145],114: [218],115: [373],116: [210],117: [337],118: [273,198],119: ['DEATH'],120: [95],121: [257],122: [47],123: [211,35,283],124: [400],125: [209],126: [316],127: [53,387,240,194],128: [336,36,262,152],129: [260,370,237],130: [333],131: [348],132: [18,238,375],133: [206,82],134: [60,269,245],135: [326],136: [17,167,389],137: [383,14],138: [376,64],139: [346,244,28],140: [25,104],141: [156],142: [234],143: [360,226,184],144: [154,56],145: [80],146: [247,201,102,66],147: [260,129,370],148: ['DEATH'],149: [245,209,380],150: [374],151: [19,197],152: [180],153: ['DEATH'],154: [275,56],155: [65],156: [71,284,114],157: [199,232],158: [77],159: [323],160: [206],161: [106,390],162: [32],163: [95],164: ['DEATH'],165: [398,202],166: [13,281],167: [224,331],168: [328],169: [19,197,317,151],170: [292,64,304],171: [365,278,31],172: [26,289],173: [218],174: [268,116],175: [110,288],176: [127,21,329],177: [5,344],178: [17,265],179: [378,125,341],180: [99],181: [54,25],182: [85,395,322,248],183: [270],184: ['DEATH'],185: [13],186: [15,83,245],187: [279,314,115],188: [301,159,51],189: [319,130,43,333],190: [147],191: [119],192: [29],193: [211,123,35,283],194: ['DEATH'],195: [377],196: [45,13,281],197: [363],198: [177,290],199: ['DEATH'],200: [237,98],201: [270],202: ['DEATH'],203: [16,11],204: [73],205: [309,368],206: [182],207: [188],208: ['DEATH'],209: [156,362],210: [192,359],211: [123,35,283],212: [90],213: [235,209],214: [62],215: [136,41],216: [294,391,36],217: [293,57],218: [118,94],219: [95],220: [243,2],221: [127],222: [137,14],223: [138],224: [265],225: [15,245],226: [312,37,384,184],227: [234],228: [88,170,296],229: ['TURN TO 217',50,164],230: [96,288],231: [196,243],232: [111,72],233: [374],234: [397,69],235: [245,269],236: [140],237: [169],238: [18,375,31],239: [379,82],240: [6],241: [77],242: [24,105,95],243: [352,2],244: [2,243],245: [161,390,47],246: [174],247: [234],248: [103],249: [392,231,55],250: ['DEATH'],251: [222,179,321],252: [229],253: [13,281],254: [197],255: [198,290],256: [65,155],257: [237,357,200],258: [140,366],259: [218],260: [34,299,237],261: [81,175,394],262: [180],263: [326],264: [177],265: [169],266: [310,54],267: [156],268: [210],269: [205,186,225],270: [185,23],271: [348,131],272: [242,95],273: [371,255,49],274: [353,277],275: [399,272],276: [165,202],277: [330,315,76,119],278: [171,365,31],279: [44,318,78,335],280: [323],281: [382,285,356],282: [112],283: ['DEATH'],284: [71,114],285: [185,23],286: [140],287: [160,27,25],288: [162,86,32],289: [340,214,305,304],290: [325,307,70,264],291: [328],292: [376,64,42],293: [374],294: [99],295: [213],296: [292],297: [2,316,75],298: [58,141],299: [237],300: [244,346,28],301: [323],302: [169],303: [147],304: [172,26,289,64],305: [64],306: [52,132],307: [177],308: [257],309: [15,245],310: [181,250,393,104],311: [178,61],312: [184],313: [13,281],314: [373],315: [191],316: [220,139,300],317: [19,197],318: [381,117,277],319: [333],320: [332,113,351],321: [269,339],322: [39,168,291,248],323: [386,144,338],324: [369],325: [177],326: [84,31],327: [366],328: [67,143,226],329: [21,221],330: [208,119],331: [265],332: [80,48],333: [14],334: [275],335: [342],336: [99,180],337: [400],338: [90],339: [134,149],340: [64],341: [209],342: ['DEATH'],343: [55,249],344: [7,5],345: [140],346: [243,2],347: [12],348: [207,22,354,68],349: [157],350: [218],351: [400],352: [203,16,216,11],353: [400],354: [188],355: [351],356: [146,185,23],357: [200],358: [148,256],359: [29],360: [229,184],361: [297,126],362: [58,156],363: [228,64,304],364: [174],365: [9,171,278,31],366: [140],367: [308,121],368: [15],369: ['DEATH'],370: [260,129,237],371: [177],372: [95],373: [148,256,358],374: [30,109,158],375: [263,135,63],376: ['DEATH'],377: [332,113,320,355],378: [209],379: [206],380: [213],381: [337],382: [285,356],383: [333,189],384: [252,107],385: [365,278,171],386: [204,108],387: [6],388: [157],389: [61,178,311],390: [350,122],391: [99],392: [196],393: [27,25],394: [251],395: [322,248,85],396: [183],397: [69,193],398: [79],399: [272],400: ['END']}
    # bookDict = {1: [261,54],2: ['DEATH'],3: [322,120],4: [49,93],5: [333,249],6: [148],7: [23],8: [317,392],9: [176],10: [290],11: [353],12: [271,67],13: [149],14: [255],15: [217],16: [211,345],17: [89,256,238],18: [198],19: [18],20: [277],21: [226],22: [358],23: [339],24: [377,92],25: [369,56],26: [91,220],27: [329],28: [52,266],29: [383,254],30: [225],31: [362],32: [150],33: [390],34: [231],35: [132],36: [187],37: [226,336],38: [315,220],39: [287],40: [274],41: [239],42: [342],43: [50,188],44: [293],45: [165],46: [12],47: [26,220],48: [288],49: [371],50: [188],51: [199,397],52: [78],53: [92],54: [399,261],55: [168,313,358],56: [233,163],57: [132,35],58: [112],59: [171],60: [183,44],61: [398,151],62: [208],63: [178],64: [142],65: [330],66: [325],67: [113],68: [59],69: [264,143,269,16],70: [334],71: [273],72: [138],73: [327,112],74: [25],75: [330],76: [206],77: [377,92],78: [349],79: [386],80: [293],81: [49,4],82: [235,13],83: [139],84: [146,245],85: [9,358],86: [208],87: [90],88: [212,107],89: [256,281,238],90: [210,348],91: [220],92: [299,7,100],93: [270,61],94: [136,144],95: [173,368],96: [62],97: [328,118],98: ['RESTART'],99: [209,349],100: [339],101: [25],102: [105],103: [57,360],104: [311],105: [384,394],106: [288],107: [152],108: [226],109: [124,72,309],110: [257,31],111: [150],112: [103],113: [324,149],114: [350,123],115: [382,277],116: [314],117: [232],118: [174],119: [90,216],120: [94,380],121: [61,81],122: [135,362],123: [27,234],124: [180],125: [337,15],126: [365,22],127: [298],128: [272],129: [349],130: [153,355],131: [325],132: [258,167],133: [374,360],134: [283,303],135: [284,151],136: [69],137: [55,10],138: [64,159],139: [198],140: [25,267],141: [347,59],142: [366,178,251],143: [80],144: [213,387],145: [285],146: [245],147: [38,220],148: [97,20],149: [130,306],150: [357,171],151: [71,296],152: [333,5,249],153: [202,355],154: [231],155: [83,259],156: [109],157: [125,337],158: [47,353],159: [142],160: [343,8,239],161: [185,341],162: [285],163: [375],164: [144],165: [242],166: [390],167: [305],168: [117,358],169: [85,358],170: [223,346],171: [190],172: [89,256,281],173: [58,227],174: [323],175: [372,106],176: [358],177: [289,160],178: [298],179: [115],180: [105,361],181: [162],182: [70,334],183: [293],184: [390],185: [250,149],186: [131],187: [286,203,6],188: [221,359],189: [269,293],190: [265,318],191: [184,243],192: [12,46],193: [110],194: [208],195: [352,156],196: [376,39,25],197: [24,53],198: [278,87],199: [134,283,303],200: [351,112],201: [389,88],202: [355],203: [373],204: [400,381],205: [92],206: [253,187],207: [302,109],208: [99,291],209: [28,349],210: [43,188],211: [293],212: [321,107],213: [306],214: [69],215: [248,201],216: [278],217: [262,337],218: [274],219: [300],220: [275,115],221: [378,199],222: [293],223: [150],224: [332],225: [135,362],226: [29,254],227: [312,2],228: [255],229: [165,45],230: [137,290,358],231: [224,332],232: [263,358],233: [17,238],234: [382],235: [149],236: [170,150],237: [214,304],238: [221],239: [37,226],240: [338,169],241: [219],242: [121],243: [166,33],244: [198],245: [163,233,393],246: [204],247: [3,144],248: [389,88],249: [164],250: [82],251: [63,260],252: [309,72],253: [344,187],254: [241,300],255: [182,334],256: [122,295],257: [31],258: [305],259: [244,19],260: [178],261: [177],262: [337],263: [126,358],264: [367,189,282],265: [356],266: [354,129],267: [196,25],268: [119],269: [293],270: [229,121],271: [297,67],272: [394],273: [296],274: [195,109],275: [179,115],276: [62],277: [234,114],278: [319],279: [246],280: [306],281: [163,393],282: [16,293],283: [303],284: [81,270],285: [388],286: [373],287: [25],288: [84,245],289: [76,147],290: [385,358],291: [335,145],292: [95,112],293: [215,389,88],294: [106,175,288],295: [225,30],296: [398,284],297: [67],298: [140],299: [65,75],300: [138,331],301: [157],302: [109],303: [247],304: [69],305: [374,133,360],306: [391,112],307: [192,271],308: [148],309: [77,197],310: [101],311: [204],312: [112],313: [240,85,358],314: [294,288],315: [42,342],316: [198],317: [301,41],318: [231],319: [228,14],320: [362],321: [107],322: [94,380],323: [291,99,102],324: [250,161,149],325: [268,79],326: [145],327: [351,112],328: [118],329: [180,252],330: [116],331: [124,309],332: [103],333: ['DEATH'],334: [113,51],335: [181,326],336: [21,108],337: [230,358],338: [85,358],339: [65,75],340: [141,347,59],341: [149],342: [158,11],343: [8,239],344: [36],345: [293],346: [32,111],347: [363],348: [43,188],349: [291,102],350: [329],351: [292,112],352: [207,156],353: [26,220],354: [349],355: [340],356: [34,395,231],357: [306],358: [40,218],359: [172,281],360: [279,104],361: [396,86],362: [281,238],363: [68,59],364: [276,194],365: [358],366: [127,178],367: [60,222],368: [112],369: [191,390],370: [231],371: [93],372: [48,288],373: [308,148],374: [133,360],375: [150,236],376: [74,310],377: [205,92],378: [307,67],379: [73,112],380: [237,144],381: [98],382: [97],383: [254],384: [128,394],385: [168,313,358],386: [119],387: [340],388: [155,316],389: [215,88],390: [190,280],391: [200,379],392: [157],393: [369],394: [66,186],395: [154,370],396: [364,96],397: [163,393],398: [320,193],399: ['DEATH'],400: ['END']}
    # bookDict = {1:[256],2:[222,41],3:[236,173],4:[148,85,120],5:[15,143],6:[339],7:[210],8:[317],9:[221,299],10:[123,154],11:[329,2,92],12:[78],13:[115,25,179],14:[27],15:[157],16:[180,93],17:[105],18:[337],19:[231,73],20:[166,113],21:[259],22:[311],23:[84],24:[81,221,299],25:[115,179],26:[202,36],27:[104,137],28:[184,156],29:[187],30:[190,165],31:[207],32:[111,122],33:[332,224],34:[13,203],35:[24,9],36:[330],37:[187],38:[339],39:[169,218],40:[314],41:[89,253],42:[73,290],43:[301,239],44:[171,250],45:[311,173],46:[11],47:[30,96,217,295],48:[35,299,221],49:[147,309],50:[157,294],51:[281,135],52:[193,109],53:[293,312],54:[120],55:[130],56:[117,313],57:[287],58:[235],59:[339],60:[136,260],61:[244,237],62:[339],63:['DEATH'],64:[239,43],65:[242],66:[306,18,201],67:[215],68:[210],69:[10,323],70:[35,221],71:[156],72:[280],73:[161,103],74:[242],75:[90,213],76:[48],77:[312,192],78:[64,94],79:[254,283],80:[59],81:[299,221],82:[339],83:[203],84:[270,40],85:[229],86:[209,321],87:['DEATH'],88:[141],89:[145,207],90:[336],91:[164],92:[335,5],93:[79],94:[239,43],95:[76,63],96:[190],97:[230],98:[127],99:[26,245,36],100:[236,173],101:[7,68],102:[240],103:[150],104:[118,296],105:[303,247],106:[242],107:[304],108:[140],109:[320,32,57],110:[327,69],111:[187],112:[220],113:[166,192],114:[339],115:[170],116:[286,141],117:[27],118:[4,21],119:[70],120:[296],121:[297,215],122:[37,225],123:[278,323],124:[251,48],125:[177,231],126:[261,329],127:[53],128:[75],129:[284],130:[233,292],131:[91],132:[289,189],133:[285,264,198],134:[310,320],135:[16],136:[28,260],137:[50,294,324],138:[340],139:[181,119],140:[317,206,8],141:[44,34],142:[69,226],143:[185],144:[158,178],145:[272,159,31],146:[203],147:[309],148:[229],149:[48],150:[161,194,290],151:[14,313],152:[141],153:[18],154:[174],155:[203],156:[328,3,100],157:[74,308,106],158:[178,53],159:[31],160:[269],161:[194,290],162:[316],163:[44,79],164:[227,203],165:[248],166:[293,338],167:[60],168:[26,99,36],169:[105,218],170:[291,155],171:[108,263],172:[153,255],173:[200,22],174:['DEATH'],175:[251],176:[66],177:[307,19],178:[205,271],179:[115],180:[258,86],181:['DEATH'],182:[23,84],183:[72],184:[71],185:[253,89],186:[336],187:[78,326],188:[16],189:[175,149],190:[327,69],191:[120],192:[113,293],193:[257],194:[290],195:[187],196:[141,152],197:[80],198:[44,333],199:[61,237],200:[243,279],201:[172],202:[16],203:[126],204:[165,47],205:[41],206:[317],207:[253],208:[48,234],209:[125,73,231],210:[107,219],211:[339],212:[74,106],213:[336],214:[318,305],215:[33,238,309],216:['TURNTO'],217:[30,96,295],218:[265,169,319],219:[146,249],220:[55,325],221:[162,35,299],222:[98,144],223:[129,46],224:[49,309],225:[57],226:[327,69],227:[282,83],228:[283],229:[191,298],230:[56,277,151],231:[42,334],232:[41],233:[44,79],234:[95],235:[133],236:[45,87],237:[315],238:[160],239:[183],240:[128,302],241:[19],242:[324],243:['DEATH'],244:[274,131],245:[188],246:['DEATH'],247:['DEATH'],248:[58,235],249:[304],250:[34],251:[234,208],252:[165],253:[52,109],254:[167,228],255:[18],256:[86,273,142],257:[109],258:[300,163],259:[120,54],260:[288,136],261:[176,66],262:[324,157],263:[140],264:[182],265:[218,196],266:[134],267:[339],268:[139,70],269:[34],270:[314],271:[53],272:[159,31],273:[281,51,135],274:[91],275:[124],276:[220],277:[56,151],278:[248],279:[311],280:[320],281:[168,135],282:[203],283:[60],284:[11],285:[182],286:['DEATH'],287:[195,29],288:['DEATH'],289:[275,251],290:[258,44],291:[101,155,199],292:[233],293:[322,338],294:[262,324],295:[110,252],296:[324],297:[160,215],298:[120],299:[268,35,221],300:[276,112,220],301:[320],302:[186,128],303:[88],304:[203,199],305:[246,113],306:[172],307:[241,19],308:[212,65],309:['DEATH'],310:[239],311:[34],312:[20,77],313:['DEATH'],314:[102,128,302],315:[91],316:[253,92],317:[297,67,121],318:[232,305],319:[17,116],320:[137,331],321:[258,44],322:[113,214],323:[248],324:[216,197],325:[130],326:[266,12],327:[204,190,47],328:['DEATH'],329:[132,316],330:[202],331:[97,104],332:[160],333:[39,141],334:[290],335:[15,185],336:[44,333],337:[223,284],338:[20,166],339:['DEATH'],340:['END']}
    bookDict = {1:[48,95],2:[49,173],3:['DEATH'],4:[284,123],5:[273,297],6:[175,52],7:[266,207],8:[141,316,341],9:[195],10:[142,59,227],11:[210,176,102,374],12:[61,161],13:[212,287,376],14:[338,88,312],15:[63,198,276,212],16:[198],17:[179],18:[19],19:[280,137],20:[342],21:[55,390],22:[320,90,11],23:[248],24:[249],25:[202],26:[354],27:[2,173],28:[362],29:[185,378],30:['DEATH'],31:[364,47,394,77],32:[269,80],33:[134,167],34:[237,291,356,209],35:[281,399,309],36:[283,396],37:[292,220],38:[153],39:[348],40:[4,50,97],41:[382,270,87],42:[253,88],43:[339,313],44:[157,398],45:[331,303],46:[314],47:[290,31,118],48:[95],49:['DEATH'],50:[373,222,315],51:[296,5],52:['END'],53:[329,13,62],54:[109,285],55:[390,200],56:[158,8],57:[124],58:[398,105,208],59:[227],60:[279],61:[229,366],62:[323,146],63:[15,212],64:[314,154],65:[343,137,231,387,163],66:[192,267,17,147],67:[19],68:[302,215],69:[390],70:[216,110,377],71:[149],72:[249,24],73:[202],74:[361,261,113,144],75:[28],76:[166,333],77:[47],78:[150,343],79:[360,128],80:[307,196,204],81:[187],82:[330,308],83:[35,357],84:[363],85:[153],86:[189,348],87:[189,348],88:[121,331],89:[325,295],90:[370,254,44],91:[398,105,208],92:[108,344,68],93:[120],94:[295,320],95:[240,122],96:[371],97:[315,284],98:['DEATH'],99:[242],100:['END'],101:[350,118],102:[11],103:[161],104:[352],105:[330,21,55,390],106:[267,179],107:[19],108:[342],109:[349,124,256],110:[319],111:[184],112:[73,202],113:[165],114:[28],115:[234],116:[343],117:[363],118:[303,70,182],119:[39,293,381,337,320],120:[314,154],121:[170,14,275,218],122:[240,296],123:[225,315],124:[340],125:[279],126:[145],127:[104],128:[180,19],129:[268,181],130:[260,111,201,288],131:[23,164,288],132:[73,202],133:[234],134:[187,81],135:[309],136:[379],137:[153,336],138:[101,45],139:[335,27],140:[375,335,27],141:['END'],142:[227],143:[374,176],144:[345,74,26,332],145:[252,328,211,126,275],146:[230],147:[213,106],148:[19],149:[217],150:[343],151:[281,399,309],152:[136,264,347,117,334],153:[218,65],154:[46],155:[335],156:[241,193,326],157:[279,28,203],158:['END'],159:[6,226,56],160:[176],161:[92,41,121],162:[352,245,62],163:[79,353],164:[248],165:[388,105],166:[234],167:[322,310,134],168:[330,209],169:[281],170:[363,29,262,76],171:[153,38],172:[314],173:[9],174:[225,193],175:['END'],176:[125],177:[161],178:[352],179:[183,10,118],180:[214],181:[200],182:[319],183:[66,295,30,321],184:[217],185:[234],186:[343],187:[144,290,10],188:[400,336],189:[348],190:[270],191:[224,294,93,64,398],192:[267,179],193:[206],194:[99,207],195:[58,91],196:[367],197:[161],198:[146],199:[19],200:[390,69],201:[217],202:[138,41,14],203:[75,393,114,28],204:[250,269,32,80],205:[335,255,27],206:[9],207:[358],208:[195,159],209:[168,397,82,34],210:[243,143],211:[366],212:[62,258,15],213:[267],214:[19],215:[247],216:[319],217:[250],218:[72,336,121],219:[234],220:[292,334],221:[348,277],222:[174],223:[270],224:[314,46],225:[140],226:[54,7,194],227:[66,388,320],228:[279],229:[286,177],230:[352],231:[18,259],232:[389,342],233:[392,25],234:[305,121],235:[19],236:[116],237:[82],238:[363],239:[314],240:[205,155],241:[206],242:[124,256,358],243:[279],244:[161],245:[352],246:[19,67],247:[20,232,342],248:[202],249:[336,121],250:[367,269],251:[363],252:[161],253:[88],254:[157,398],255:[40,139],256:[274,365,385,351,57],257:[153,311],258:[198,127,212],259:[235],260:['DEATH'],261:[354],262:[166,115],263:[187,33],264:[379],265:[348],266:[242],267:[386],268:[390],269:[367],270:[275,331],271:[120],272:[205],273:[335,27],274:[375,298],275:[342,12,229,145],276:[104],277:[348,86],278:[19],279:[28,203],280:[355,395,78,289],281:[135],282:[38],283:[363],284:[156,315],285:[124,256],286:[244,317,103],287:[198,359],288:[391,184,130],289:[150,343],290:[323,83,151],291:[82],292:[363],293:[348],294:[271,172],295:[183,94,89],296:[272,3],297:['DEATH'],298:['END'],299:[176,279],300:[161],301:[19,246],302:[247],303:[70],304:[149,71,131],305:[238,36,84,334],306:[378],307:[269],308:[330],309:[47,53,388],310:[187],311:[85,171],312:[88,324],313:['DEATH'],314:[90,195],315:[51],316:[100,341],317:[161],318:[214],319:[139,47,66],320:[265,368,221,119],321:[30],322:[81],323:[309,281],324:[88,383,42],325:[369,43],326:[98,315,225],327:['DEATH'],328:[244,317,103],329:[178,352],330:[129,268],331:[202,112],332:['DEATH'],333:[234],334:[379,152,37],335:[371,96],336:[137,85,257,171,400],337:[221],338:[88],339:[384,313],340:[375,298],341:[327,372],342:[197,300],343:[199,301],344:[247],345:[165],346:[281],347:[379,363],348:[94,157,10,204],349:['END'],350:[331,392,25,233],351:[124],352:[323],353:[235],354:[165],355:[186],356:[82],357:[281,399,309],358:['END'],359:[162,16],360:[214],361:['DEATH'],362:[22],363:[133,234,306],364:[47],365:[124],366:[161],367:[304,265],368:[348],369:[384,313],370:[157,398],371:[9],372:['DEATH'],373:[225],374:[299,60,228,160,11],375:['DEATH'],376:[323],377:[319],378:[234,219],379:[363,251],380:[400,336],381:[348],382:[270,190,223],383:[324],384:[101],385:[124],386:[179],387:[107,278,148,318,65],388:[263,134,167],389:[342],390:[144,209,195],391:[217],392:[132],393:[22],394:[47,77],395:[116,236,78,289],396:[363],397:[330],398:[239,314,191,120],399:[346,169,281],400:[188,380,282,336]}

    leadingDict = {1:['BEGINNING']}
    newLeadingDict = {}
    turnToDict = {}
    noLeadsDict = {}

    # bookDict[216] = ['TURN TO 211','TURN TO 267','TURN TO 82','TURN TO 114','TURN TO 138','TURN TO 6','TURN TO 38','TURN TO 62']
    # bookDict[216] = ['TURN TO 174','TURN TO 186','TURN TO 200','TURN TO 219','TURN TO 231','TURN TO 233','TURN TO 245','TURN TO 276','TURN TO 288','TURN TO 290','TURN TO 302','TURN TO 321','TURN TO 335','TURN TO 347']
    # bookDict[182] = ['TURN TO 174','TURN TO 186','TURN TO 200','TURN TO 219','TURN TO 231','TURN TO 233','TURN TO 245','TURN TO 276','TURN TO 288','TURN TO 290','TURN TO 302','TURN TO 321','TURN TO 335','TURN TO 347']
    # bookDict[198] = ['TURN TO 174','TURN TO 186','TURN TO 200','TURN TO 219','TURN TO 231','TURN TO 233','TURN TO 245','TURN TO 276','TURN TO 288','TURN TO 290','TURN TO 302','TURN TO 321','TURN TO 335','TURN TO 347']

    for dict in bookDict:
        for ref in bookDict[dict]:
            if (ref != 'DEATH' and ref != 'RETURN' and ref != 'END' and ref != 'RESTART'):
                if ref == 'TURNTO':
                    turnToDict[dict] = bookDict[dict]
                else:
                    ref = int(str(ref).replace('RETURN ','').replace('TURN TO ',''))
                    if ref in leadingDict:
                        leadingDict[ref].append(dict)
                        newLeadingDict[ref].append(dict)
                    else:
                        leadingDict[ref] = [dict]
                        newLeadingDict[ref] = [dict]


    for dict in bookDict:
        if dict not in leadingDict:
            noLeadsDict[dict] = bookDict[dict]

    print(turnToDict)
    print(noLeadsDict)

    # return HttpResponse("testing")

    #THE OPERATION THAT MAPS OUT THE BOOK
    orderArray = []
    orphanRefs = []
    returnRefs = []
    goToArray = [1]
    newLeadingDict[1] = []

    for dict in newLeadingDict:
        if dict not in leadingDict:
            orphanRefs.append(dict)
        else:
            for x in newLeadingDict[dict]:
                if x in bookDict[dict] and x in newLeadingDict[dict]:
                    newLeadingDict[dict].remove(x)

    while True:
        found = False
        for x in goToArray:
            if len(newLeadingDict[x]) == 0:
                goToArray.remove(x)
                found = True
                orderArray.append(x)
                gotoRefs = bookDict[x]
                gotoRefs.reverse()
                for z in gotoRefs:
                    if z == 'RETURN':
                        returnRefs.append(x)
                        orderArray.remove(x)
                    elif z != 'DEATH' and z != 'RESTART' and z != 'END' and int(str(z).replace('RETURN ','').replace('TURN TO ','')) not in orderArray:
                        z = int(str(z).replace('RETURN ','').replace('TURN TO ',''))
                        if z not in goToArray:
                            goToArray.insert(0, z)
                for y in newLeadingDict:
                    y = int(str(y).replace('RETURN ','').replace('TURN TO ',''))
                    if x in newLeadingDict[y]:
                        newLeadingDict[y].remove(x)
                break
        if len(goToArray) == 0:
            break
        if found == False:
            x = goToArray[0]
            goToArray.remove(x)
            orderArray.append(x)
            gotoRefs = bookDict[x]
            gotoRefs.reverse()
            for z in gotoRefs:
                if z == 'RETURN':
                    returnRefs.append(x)
                    orderArray.remove(x)
                elif z != 'DEATH' and z != 'RESTART' and z != 'END' and int(str(z).replace('RETURN ','').replace('TURN TO ','')) not in orderArray:
                    z = int(str(z).replace('RETURN ','').replace('TURN TO ',''))
                    if z not in goToArray:
                        goToArray.insert(0, z)
            for y in newLeadingDict:
                y = int(str(y).replace('RETURN ','').replace('TURN TO ',''))
                if x in newLeadingDict[y]:
                    newLeadingDict[y].remove(x)

    # print(orderArray)
    # print(goToArray)

    # END RESULT
    for ref in orderArray:
        bookDict[ref].reverse()
        if ref == 1:
            print('[\'BEGINNING\']\t' + str(ref) + '\t' + str(bookDict[ref]))
        else:
            print(str(leadingDict[ref]) + '\t' + str(ref) + '\t' + str(bookDict[ref]))

    for ref in returnRefs:
        bookDict[ref].reverse()
        print(str(leadingDict[ref]) + '\t' + str(ref) + '\t' + str(bookDict[ref]))

    for ref in noLeadsDict:
        bookDict[ref].reverse()
        print('[\'ORPHAN\']\t' + str(ref) + '\t' + str(bookDict[ref]))

    totalDict = {}
    for x in orderArray:
        if x in totalDict:
            totalDict[x] += 1
            print(x)
        else:
            totalDict[x] = 1

    print(len(orderArray))
    print(len(returnRefs))
    print(len(noLeadsDict))

    # for dict in bookDict:
    #     if dict == 1:
    #         print('[BEGINNING]\t' + str(dict) + '\t' + str(bookDict[dict]))
    #     elif dict not in leadingDict:
    #         print('[ORPHAN]\t' + str(dict) + '\t' + str(bookDict[dict]))
    #     else:
    #         print(str(leadingDict[dict]) + '\t' + str(dict) + '\t' + str(bookDict[dict]))

    return HttpResponse("testing")